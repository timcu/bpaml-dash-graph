Tuesday MeetUp 100 - Beginners Python and Machine Learning - 23 Mar 2021 - Single page web apps with dash

Learning objectives:
- python scripts (not notebooks)
- virtual environments (python or anaconda)
- dash
- plotly.py

@author D Tim Cummings

Task 1: Setup environment
- Install Python 3.9 from https://www.python.org/downloads/release/python-392/
  - Add python to path when installing, or know where it is for later
  - (3.6 or later should be fine, anaconda also fine)
- Install Git from https://git-scm.com/download/
- Install IDE eg PyCharm Community Edition 2020.3.3 from https://www.jetbrains.com/pycharm/download/
- Clone repository and setup virtual environment (see readme1.md)
- git checkout challenge2  # Git > Branches... > Checkout tag or revision > challenge2


Task 2: First dash application
- See https://dash.plotly.com/layout
- Create a simple layout with a single <h1> and a single <div> element
- Run the application from the command line (python bpaml_dash_graph.py) or IDE (ctrl-shift-r)
- Create a branch to commit your changes
    git checkout -b mytask2attempt              # -b creates a branch. GUI: Git > Branches... > New Branch
    git commit -a -m "my task 2 solution"       # -a adds all changes before commit. GUI: Commit tab (top left).
    # might need to turn on new behaviour in PyCharm. GUI: File > Settings... > Version Control > Commit > Non-modal commit
- Checkout task 3 and compare differences
    git checkout challenge3                     # check out branch called challenge3
    git diff challenge2 challenge3              # show what has changed between challenge2 and challenge3. GUI: Log


Task 3: Dropdown menu for list of countries
- Code from meetup053 has been added into a class in data_cache.py. Initialise using:
    import data_cache
    data = data_cache.DataCache()
- Get DataFrame from DataCache.df_for_case_type()
- Get all unique countries from column "Country/Region" in DataFrame
- Sort the countries in place
- Create an html.Label with the text "Country"
- Create a dash_core_components Dropdown with
    id="input-country",
    value="" (initial selection),
    options= list of dictionaries for the countries. "label" is what is shown, "value" is what is returned to app
        [{"label": "Australia", "value": "Australia"}, {"label": "New Zealand", "value": "New Zealand"}]
- Create a branch to commit your changes
    git checkout -b mytask3attempt
    git commit -a -m "my task 3 solution"
- Checkout task 4
    git checkout challenge4


Task 4: Use callbacks on Dropdown menu to change text in div.
- See https://dash.plotly.com/basic-callbacks
- Create a html.Div with the initial text empty and an id of "text-selected-country"
- Create a function which takes the country name and returns "You have selected {country}"
- Use the @app.callback decorator to call the function when "value" of "input-country" changes
  and stores result in "children" of "text-selected-country"
- Commit your changes to your own branch and checkout challenge 5
    git checkout -b mytask4attempt
    git commit -a -m "my task 4 solution"
    git checkout challenge5


Task 5: Use selected country to filter Dropdown for state
- Create an html.Label with the text "State/Province"
- Create a dash_core_components Dropdown with
    id="input-state",
    value="" (initial selection),
    options= list of dictionaries for the states [{"label": state, "value": state}, ...]
- Use the @app.callback decorator to call a function when "value" of "input-country" changes
  and stores result in "options" of "input-state"
- Also change update_text_selected_country() to take two input values. Use function location_name in utilities.py
- define a function in utilities.py called location_name(country=None, state=None) which returns location name
- Commit your changes to your own branch and checkout task6
    git checkout -b mytask5attempt
    git commit -a -m "my task 5 solution"
    git checkout challenge6


Task 6: Draw covid days doubling chart based on selected country and state
- figure_cumulative_doubling has been provided from meetup053
- add a dash_core_components Graph object with id="graph-doubling-days" and a figure=fig_for_location(data=data)
- define a function update_graph(country, state) which returns a figure based on selected country and state
- Use the @app.callback decorator to call the function when "value" of "input-country" or "input-state" changes
- Commit your changes to your own branch and checkout 7
    git checkout -b mytask6attempt
    git commit -a -m "my task 6 solution"
    git checkout challenge7
